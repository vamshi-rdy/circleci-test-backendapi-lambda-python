version: 2.1

jobs:
  build:
    docker:
      - image: circleci/python:3.8
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            python -m venv venv
            . venv/bin/activate
            # pip install -r requirements.txt
            pip install awscli
      - run:
          name: package application
          command: |
            . venv/bin/activate
            zip function.zip Lambda.py
            pwd
            ls
      - run:
          name: Install AWS CLI
          command: pip install awscli
      - run:
          name: configure AWS credentials
          command: |
            aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
            aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
            aws configure set default.region $AWS_DEFAULT_REGION
      - run:
          name: upload to s3
          command: |
            pwd
            ls
            aws s3 cp function.zip s3://lambdafunctionpackagedfile/function.zip
            
  deploy:
    docker:
      - image: circleci/python:3.8
    # parameters:
    #   s3-bucket-name:
    #     type: string
    #     default: test-api-circleci
    #   stack-name:
    #     type: string
    #     default: testapistack
      
    steps:
      # - checkout
      - run:
          name: Install AWS CLI
          command: pip install awscli
      # - run:
      #     name: Install AWS SAM CLI
      #     command: |
      #       pip install aws-sam-cli
      - run:
          name: configure AWS credentials
          command: |
            # ROLE_ARN="arn:aws:iam::992382428282:role/dynamic-aws-credentials"
            # echo role
            # SESSION_NAME="circleci-session"
            # echo sessionname
            # TEMP_CREDENTIALS=$(aws sts assume-role --role-arn $ROLE_ARN --role-session-name $SESSION_NAME)
            # echo temp
            # export AWS_ACCESS_KEY_ID=$(echo $TEMP_CREDENTIALS | jq -r '.Credentials.AccessKeyId')
            # echo accesskey
            # export AWS_SECRET_ACCESS_KEY=$(echo $TEMP_CREDENTIALS | jq -r '.Credentials.SecretAccessKey')
            # echo secretkey
            aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
            aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
            aws configure set default.region $AWS_DEFAULT_REGION
      - run:
          name: verifying working directory
          command: |
            pwd
            ls -la
      - run:
          name: Deploy lambda function
          command: |
            # zip function.zip Lambda.py
            pwd
            ls
            # if aws lambda get-function --function-name lambda_handler; then
            #   aws lambda update-function-code --function-name lambda_handler --zip-file fileb://function.zip --region $AWS_DEFAULT_REGION
            # else
            #   aws lambda create-function --function-name lambda_handler \
            #     --zip-file fileb://function.zip \
            #     --handler lambda_function.lambda_handler \
            #     --runtime python3.8 \
            #     --role arn:aws:iam::992382428282:role/lambdadeploytest \
            #     --region $AWS_DEFAULT_REGION
            # fi
             aws lambda update-function-code --function-name lambda_handler --s3-bucket lambdafunctionpackagedfile --s3-key function.zip --region $AWS_DEFAULT_REGION
             # aws lambda update-function-code --function-name lambda_handler --s3-bucket lambdafunctionpackagedfile --region $AWS_DEFAULT_REGION
             aws lambda create-function --function-name lambda_handler \
                --zip-file fileb://function.zip \
                --handler lambda_function.lambda_handler \
                --runtime python3.8 \
                --role arn:aws:iam::992382428282:role/lambdadeploytest \
                # --code s3Bucket=lambdafunctionpackagedfile \
                -- code S3Bucket=lambdafunctionpackagedfile, S3Key=function.zip \
                --region $AWS_DEFAULT_REGION

workflows:
  version: 2
  testdeploy:
    jobs:
      - build:
          name: package lambda function
          context: aws-credential-dev
      - deploy:
          name: deploy-lambdafunction
          requires:
            - package lambda function
          context: aws-credential-dev
          filters:
            branches:
              only: main
                                
              
